package datastructure

import "testing"

func TestBfs(t *testing.T) {
	_map := [][]byte{
		{'#', 'S', '#', '#', '#', '#', '#', '#', '.', '#'},
		{'.', '.', '.', '.', '.', '.', '#', '.', '.', '#'},
		{'.', '#', '.', '#', '#', '.', '#', '#', '.', '#'},
		{'.', '#', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'#', '#', '.', '#', '#', '.', '#', '#', '#', '#'},
		{'.', '.', '.', '.', '#', '.', '.', '.', '.', '#'},
		{'.', '#', '#', '#', '#', '#', '#', '#', '.', '#'},
		{'.', '.', '.', '.', '#', '.', '.', '.', '.', '.'},
		{'.', '#', '#', '#', '#', '.', '#', '#', '#', '.'},
		{'.', '.', '.', '.', '#', '.', '.', '.', 'G', '#'},
	}
	dist := make([][]int, len(_map))
	for i := 0; i < len(_map); i++ {
		dist[i] = make([]int, len(_map[0]))
		for j := 0; j < len(_map[0]); j++ {
			dist[i][j] = INF
		}
	}
	r := bfs(_map, dist, 0, 1, len(_map), len(_map[0]))
	t.Log(r)
}

func TestSubSetDfs(t *testing.T) {
	str := []byte{'a', 'b', 'c', 'd'}
	subSetDfs(str)
}

func TestDfs(t *testing.T) {
	input := []int{1, 2, 4, 7}
	if !dfs(0, 0, 13, input) {
		t.Fatalf("13=2+4+7")
	}
}
